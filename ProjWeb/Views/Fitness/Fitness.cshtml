@using ProjWeb.Models
@model FitnessCenter
@{
    /**/

    ViewBag.Title = "Fitness";
}

<style>
    table {
        margin-top: 5%;
        align-content: center;
        width: 75%;
        border-collapse: collapse;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
        width: 20%
    }

    tr:nth-child(even) {
        background-color: #D6EEEE;
        border-bottom: 1px solid #ddd;
    }
</style>

<h2>Fitness</h2>

<h3>@Model.name</h3>
<h3>@Model.address</h3>
<h3>@Model.owner.name</h3>
<h3>@Model.openingYear</h3>
<h3>@Model.priceGroupTraining</h3>
<h3>@Model.priceMonth</h3>
<h3>@Model.pricePersonalTraining</h3>
<h3>@Model.priceTraining</h3>
<h3>@Model.priceYear</h3>

<table id="fitness" class="table">
    <tr>
        <th>name</th>
        <th>duration</th>
        <th>time</th>
        <th>type</th>
        <th>capacity</th>
    </tr>
    @foreach (GroupTraining gt in Database.groupTrainings.Values.Where(x => x.fitnessCenter.name.Equals(Model.name)))
    {
        if (gt.deleted)
        {
            continue;
        }
        <tr>
            @if ((User)Session["visitor"] != null)
            {
                User visitor = (User)Session["visitor"];
                if (visitor.role.Equals(role.trainer) &&
                    visitor.fitnessCenter.Contains(gt.fitnessCenter) &&
                    visitor.groupTrainings.Contains(gt))
                {
                    <td>
                        <form form method="post" action="~/Fitness/Training">
                            <input type="submit" name="training" value="@gt.name" style="width:100%" />
                        </form>
                    </td>
                }
                else
                {
                    <td>@gt.name</td>
                }
            }
            <td>@gt.trainingDuration</td>
            <td>@gt.trainingTime</td>
            <td>@gt.trainingType</td>
            <td>@gt.userCapacity</td>
            @if ((User)Session["visitor"] != null && gt.userCapacity > gt.users.Count)
            {
                User visitor = (User)Session["visitor"];
                if ((visitor.groupTrainings.Where(x=>x.name.Equals(gt.name)) == null) && visitor.role.Equals(role.visitor))
                {
                    <td>
                        <form form method="post" action="~/Fitness/SignUp">
                            <input type="submit" name="training" value="@gt.name" style="width:100%" />
                        </form>
                    </td>
                }
            }
            @if ((User)Session["visitor"] != null)
            {
                User visitor = (User)Session["visitor"];
                if (visitor.role.Equals(role.trainer) &&
                    gt.users.Count == 0 &&
                    visitor.fitnessCenter.Contains(gt.fitnessCenter) &&
                    visitor.groupTrainings.Contains(gt))
                {
                    <td>
                        <form form method="post" action="~/Fitness/Delete">
                            <input type="submit" name="training" value="@gt.name" style="width:100%" />
                        </form>
                    </td>
                }
            }
        </tr>
    }
</table>
<br />
<br />
@if ((User)Session["visitor"] != null)
{
    User visitor = (User)Session["visitor"];
    if (visitor.role.Equals(role.trainer))
    {
        try
        {
            if (visitor.fitnessCenter[0].Equals(Model))
            {
                <h3>CREATE TRAINING:</h3>
                <form form method="post" action="~/Fitness/Create">
                    <input required name="name" id="name" />
                    <label for="name">name</label>
                    <br />
                    <label>Training type</label>
                    <br />
                    <input required type="radio" id="yoga" name="trainingType" value="yoga">
                    <label for="yoga">yoga</label>
                    <br />
                    <input required type="radio" id="lesMillsTone" name="trainingType" value="lesMillsTone">
                    <label for="lesMillsTone">lesMillsTone</label>
                    <br />
                    <input required type="radio" id="bodyPump" name="trainingType" value="bodyPump">
                    <label for="bodyPump">bodyPump</label>
                    <br />
                    <input required name="trainingDuration" type="number" id="trainingDuration" />
                    <label for="trainingDuration">Training duration</label>
                    <br />
                    <input required name="trainingDate" type="date" id="trainingDate" />
                    <label for="trainingDate">Training date</label>
                    <br />
                    <input required name="hours" type="number" id="hours" />
                    <label for="hours">Training hours</label>
                    <br />
                    <input required name="userCapacity" type="number" id="userCapacity" />
                    <label for="userCapacity">User capacity</label>
                    <br />
                    <input type="submit" name="centerName" value="@Model.name" />
                </form>
            }
        }
        catch
        {

        }
    }
}
@if ((User)Session["visitor"] != null)
{
    User visitor = (User)Session["visitor"];
    if (visitor.groupTrainings.Find(x => x.fitnessCenter.Equals(Model)) != null && visitor.role.Equals(role.visitor))
    {
        <form method="post" action="~/Fitness/Comment">
            <input type="text" name="center" value="@Model.name" readonly />
            <br />
            <input type="text" name="comment" id="comment" />
            <label for="comment">Comment</label>
            <br />
            <select name="mark" id="mark">
                <option>1</option>
                <option>2</option>
                <option>3</option>
                <option>4</option>
                <option>5</option>
            </select>
            <label for="mark">mark</label>
            <br />
            <input type="submit" value="Comment" />
        </form>
    }

}
@if ((User)Session["visitor"] != null && Model.owner.Equals((User)Session["visitor"]))
{
    <h4>Edit center</h4>
    <form form method="post" action="~/Home/CreateCenter">
        <br />
        <input name="name" id="name" value="@Model.name" readonly />
        <label for="name">name</label>
        <br />
        <input name="year" type="number" id="year" required />
        <label for="year">opening year</label>
        <br />
        <input name="address" id="address" required />
        <label for="address">address</label>
        <br />
        <input type="number" name="priceMonth" id="priceMonth" required />
        <label for="priceMonth">price month</label>
        <br />
        <input type="number" name="priceYear" id="priceYear" required />
        <label for="priceYear">price year</label>
        <br />
        <input type="number" name="priceTraining" id="priceTraining" required />
        <label for="priceTraining">price training</label>
        <br />
        <input type="number" name="pricePersonalTraining" id="pricePersonalTraining" required />
        <label for="pricePersonalTraining">price personal training</label>
        <br />
        <input type="number" name="priceGroupTraining" id="priceGroupTraining" required />
        <label for="priceGroupTraining">price group training</label>
        <br />
        <input type="submit" value="edit center" />
    </form>
}
@if ((User)Session["visitor"] != null && Model.owner.Equals((User)Session["visitor"]))
{
    <h3>ADD TRAINER TO CENTER</h3>
    <ul>
        @foreach (User u in Database.users.Values.Where(x => x.role.Equals(role.trainer) && x.fitnessCenter.Count == 0))
        {
            if (u.trainerBanned)
            {
                continue;
            }

            <li>
                <form form method="get" action="~/Fitness/CenterAddTrainer">
                    <input type="submit" name="trainer" value="@u.username/@Model.name" style="width:100%" />
                </form>
            </li>

        }
    </ul>
}
<h3>COMMENTS:</h3>
<ul>
    @foreach (Comment c in Database.comments.Values.Where(x => x.fitnessCenter.name.Equals(Model.name)))
    {
        User visitor = new User();
        if ((User)Session["visitor"] != null)
        {
            visitor = (User)Session["visitor"];
        }
        if (c.approved || (visitor.role.Equals(role.owner) && Model.owner.Equals(visitor)))
        {
            <li style="border:">
                <p>@c.text</p>
                <p>@c.mark</p>
                <p style="font:bold;">@c.user.name</p>
                @if (visitor.role.Equals(role.owner) && !c.approved)
                {
                    <form form method="get" action="~/Fitness/ApproveComment">
                        <input type="submit" name="comment" value="@c.id" style="width:100%" />
                    </form>
                }
            </li>
        }
    }
</ul>
